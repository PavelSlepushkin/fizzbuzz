#!/usr/bin/env python3
#codewars.com  - colored triangles
#http://www.codewars.com/kata/insane-coloured-triangles
def triangle(row):
    # Your code here:
    rules={'B':'B','R':'R','G':'G',
           'BB':'B','BG':'R','BR':'G',
           'GG':'G','GB':'R','GR':'B',
           'RR':'R','RB':'G','RG':'B'}
    dict_key_max_len=16  #for tuning - length of dict keys
    def check_in_rules(subrow):   #check substring in calculated results, if not- calculate and add it to dict
        if (subrow in rules):
            return rules[subrow]
        else:
            c1=check_in_rules(subrow[:-1])
            c2=check_in_rules(subrow[1:])
            result=rules[c1+c2]            
            rules[subrow]=result
            #print(subrow+':'+result)
            return result

    if (len(row)<=dict_key_max_len):
        return(check_in_rules(row))
    else:
        while(len(row)>dict_key_max_len):
            new_row=''
            for i in range(len(row)-dict_key_max_len+1):
                tmp_str=row[i:i+dict_key_max_len]
                new_row=new_row+check_in_rules(tmp_str)
            row=new_row
        return(check_in_rules(row))
def triangle_math_solution(row):  #another optimization - math solution
    rules = {'R':0, 'G':1,'B':2}
    reversed_rules = {0:'R',1:'G',2:'B'}
    def binom_list(n):
        res=[1]
        for i in range(n//2):
            res.append(res[i]* (n-i)//(i+1))
        for i in range(n//2+1,n+1):
            res.append(res[n-i])
        return res
    row_length=len(row)
    bl=binom_list(row_length-1)
    #print(bl)
    t=0
    for i in range(row_length):
        t = t + (rules[row[i:i+1]]*bl[i])%3 
    t = t * ((-1) **(row_length-1))
    t = t % 3
    return reversed_rules[t]
def triangle_math_optimized(row):  #another optimization - math solution with only 1 loop - rewrite
    rules = {'R':0, 'G':1,'B':2}
    reversed_rules = {0:'R',1:'G',2:'B'}    
    row_length=len(row)   
    t=0  #result string
    k=1  #binom k
    k_mod3 = 1
    for i in range(row_length//2):
        t = t + (rules[row[i]]+rules[row[-i-1]])*k
        k = k * (row_length-1-i)//(i+1)        
        #k_mod3 = k % 3                            
    if 1 == row_length % 2 :
        t = t +(rules[row[row_length//2]])*k
    else:
        t = t * (-1)
    t = t % 3
    return reversed_rules[t]


def main():
    #print( binom_list(5))
    #print(triangle_math_solution('RBRGBRB'))
    print(triangle_math_optimized('B'))
    print(triangle_math_optimized('RRRRR'))
    #print(triangle('RGBG'))
    #print(triangle('RBRGBRB'))
    #print(triangle('RBRGBRBGGRRRBGBBBGG'))
    #print(triangle_math_solution('RGGGGGRBBGGRGGBRRRBGRBBGRGGBRRBRGBRGRRBBGBRBBRRGBGBRRBGBRBRGGGBBRBBRRBRBGRBRGBRRBRGBBGBGGGBRRGBRRBBBRBBGBRRBGBRRGBGRBGBBGGRBGRGBRBBRRRRGGGGBGBBRBBBRBRBBGGRBRGBBGBRRBGBGGRBRRBBBGGRBRBGBGGGGRBRBGGGBBGRGRBRGBRRGRGRRGBRBBBRBRGGRBRGBBBBGGRRBRBRRGBRGBGBGRRBBBBRRBGRRRGRGGGGRBGGBBBGGBRRBGRGBBGBRGRBBBGRRBRRGBRGGRRGBRGRBBRGGRGBRGGRGGGRRBGRRRBBBBRBRGGRRGRRRBBRRGGRRGGGBBBGRBBGBRBGGGBBRBRGRRGRRBBRBGBGGBBRBBGGBRRBRRBGRRBRBRBRGBRBRBRRRBGGBRGRBGGGBGRBBGRBGGBBRRGRRGRBBBGGBRGBGRRBGBBBBBBBGRBBGBGGBRGGRBGGBGRRGBBRRRRBGGGRBBGBGBGGGBRGBRGRBRBBGRRRGBBRGBRBRBGGGRGGGGRGRGBGGRGGRGGRRGRBGRBGGGRBBRBRGRRGGBRGRGGRBGBGRGGGRBBGBBRBBBRBRRGGRBGGRGBRRRRGBBRRRRBBGRBBBBBGBBGBRBRBBRBGBGRRRBBRRGGBGGRBGBBBBGRBGBBGGGBRRRRRRBRRGBGBRBRGBGGBGBRRRRRBRRGRRRGBBBGGRGGBGBRGRBBBBBBGRBGRGRGGRRRBBBGBBRBBGBRGBRBGGGRBRRBRBGRGRBGRRRRRRBGGRGBBRRGGGBBGGGRRGRBBGGBBBBRBRRBBBBBRGBGRBRGGGGBGGRGRRBGRBBRGBGBRGRBRBRBRRRRGBGGBRBGRBBGBBGRGBBGBGGGBRRRBRBGGRRRRGRRRRGGBBBGBRRBBBBRGRGRBGGRBGRBBBGGBGGGBRBGGBRBGRGBGBBGRRRGRBRBGBBGGGGRGRBRBBGBGGRRGGGRRRRRBBRBBRRBGBBRRRGRRRRGGGBGGBRBBGGRBRGGRGGGBBGBGRGRGBGRRGGGBRBBRBRBBBRGBRRGRRBRRRGBGRGRRBRRBBRRRRGGGGBGRBRGGRRRRBGGGBBRBRRBGBBRRRRBRGBGGBGGGRGBRBBBBBRBBGBGBBRRGGRBBGGRRGBBBBRBBGRGRRBRGGBGRGGBGGGRRRRBRRGGGGBGRBRGBGRRBRBRGRGBRBBGRGRBRGBGGRGRGBRGGBRGRBRRRRRRRBRGGGRBGGBBGGRGGBRGBRBGRBBBGBBRBGGRBRGRGBBRRBGBRGGRRGRRRBBBBGRBRGRGGBBBBRRBBGBGGBRRBGGGGBBRRGRBBBRGGBBBGRBRBRGBRBRRGRGBRGRRBBRRBBGBRGBGRBRGRRGGBRGRGRBGBGGBBRGRBBBRGRRBGGGBGBGRBRRRBGBRBGRGGRGRGBGRGGBBGGRGBBRRRRRBGGBGRBRGGGRBGBBGGGBGBRBBGBRBRGBRGGBRRBBRRBBBBRGBBBBGRBBRRRGGGRBGRGGRRRRGBGGGGBBGBGRGBGGRRBBGGBRGGGRBBRGRGGGRGGGGRBRRGGRRGBGBGBRRRRRRGBGRBGGBGRBRBBRGRRGRRRBBGRRGRBGRGBBRBGBBBBRRBRBRRRRGGGRBRGRBGRGBBRRRGRRRRRGBRBRBBGBGGGGGGBGRGRGGGBRGBRBGBRBGRRGBGBRGGBBBBRRRBRGBRBRRRGRGBGRGRGRGGGGBGGGGRBGBBGBRBRRBGBGGRGRGGBRBRRBGRRRGRBRBBRGBBBBBRGRBBRGRBGBBRRGRRGRGBGBBRBBRGBBBRBGGGGGBGGGBRBBBGBRRBRGRGGBBGRRRRGRBGRRBRGRRGGRGRRGBBRGGRGBBBRBGBBRBRRBBGBRGGBRBBGGBRGGGRRRBRRGRRBBGBRRRBGRRGGRGGGRRGGRGBGBRBGGGGGGBRGBGRGGGRRRRGGBGGBGBRRGBRRBRBGRBRGRRRGRBBBRRRGGBRBRBRRRGGGBBBBGRBRBRGBGBRRRRRBBGBGBGBBRBGBBGRGBRGGRGBRGRBGBGRGRGRBBGGRGGBGBBRBGRBGBRBBBRBRRRBGGRGRRBRGGGGGBBBRRBRGGBBRBBRGGRRGBBRRRBRBBBRGBGRRRRBBBGRBRBGRRBGRRBBRBGBRRGRBBRGRGBBBRBBBBGRBRRGBRBBGGBBBRRBRBRGGRRBRGBRRBGBBGGRRRBRBGRRBGGBRRRGBGGBBRBGGRGBGGBRBBRBGGGBGRBBGRBBRBRBBGBRGBGGRBGGBBGBBBBBBRBGRGRRBBBGRBRRBBRBBRGBGRGBBBRRGRRBRRRRGRBRBGRGGGRRGRBBRRGBGGRGRRBRRBBBRGGGRRGBBRRBRRBBRGBGBGGBRBGRRBGGRBBBGGRRGRGBGGBBRBBBBRBBBRGBGBGRRBRRRRGGRGRBBRGBRGRGGRRBBBRRBBRGRGRGBGBGBRBRRGRGBRRGGBGGRRRGBBBBBRGGRBRBRGRGBBGGGGGBRGGBBBRBBBBGRGGGBRBRBGGBGGGBRBBBGGBRGRGBBGGGRGBGGRGRBRGGGGBRBBBRRBRBRGRGRGBRBGGGBBGBGRBGRGRGBBRBRGRRRRGGGRGBGRRGGBRRRRGRRRGRGGGRBGGGBRBGRRBRGBGBRGGRBBRRGGBBBRRBGGBRBBBBRRGBBBRBRBRRBGRGGBRBRRGGRRRRRBRRRBGBBRRRBGGRGRGGGRRRRBGRBGGBGBGRRGGGGGRGGGBRGBRGBGGGRGBGRGRGRRRGGBBGGRRRBGBRBGGRRBBGBRBGBRGBGRRGRBRRBRGBRGRGBBGGBGRGBGGBGBRBGRBBBRGBRRGRBBRBBGGGRRRRRRBGRRGGGRGRGGBRRGRBGRGGRBBGBBRRGBBBGGBRRRRBBBGGGBBGBBRGBBBBGRBBBGGBGGBRGRBGRRGGGBGGGRBGGGRBRBGBRRBGRGRBBRBGGBBGBRBRRGBGRRRRGRBGRRBGBRRBBGGRGBBBGGRRRRRRGGGRGGGRRGBBBRRBBGRBGGBGGBRGGRGRGRBRGGGRRBGGBGBRRRBBRBBGBBBRRRBBRRRBRRBGRGBBBGBGGGRBBBGRBBBGBRRGRBBGBBBGRGRRGRRBRRRGRBBRBRGBGRGGBBGGBBRGBRBGRRRRGGGGRRRGGRRGGBBGRRRBGRBGRGGRBBBBRRRGGRGBGBBRBRRGGRRRBGRBBRBGBBBBGRBRBRRBRRBGGRGGBBGRGRBBRGBGGGRRBRBRBGBGRBGGGBGRGRGGGBGRBGBRBRGRGGBBBRBGBGBRBGRRBRBRBBRRGBBRRBGGRGBGGGGRRBBBRBRRBGBBGRRRRRRGGBRBRBGRBRGGGRRGGRGGRBGBBGBBBGBGGGRRBRBGBGBRBGGGRBBGRBRGRBRBBGBGRRGGGBRGRRGRBRRRGRBRGGRRBGRBBRRGGBGBGBRGRRRRBGBGBRBBGGBRRRGGGGBRRBGBGGGGBGRRRRBRGGRRGBRBGGGBBRRGGRRGRRRRRGGRBBBBGRGBRBBGRBRGGBBBRGRBRBRGRRRBGGBBBGRGGBBRBRBGRBBGGGBRGBGRRGRBGRBGGGRRBGBRGGBRBBRRBGGBBRGGBBGGGGRGRGBBRBGRGBRBBBBGRGBRRRBGBGRBGRGRBGRGGRRGGGGGBBRBRRGBBRGGRRBRBRBRRBBBGRBRRGRGRGGBGBRBBGGRRGGGRRGRGGGGGGRGRGGBRBBGBGGGGBRBGGBGRBGRRRBRBGBRGGRBRRBGRBGBRRBRRGGBBRGBGBGGRRBGGGRGRBGGRRRGRGRRBBGBBGGBBBRRGGBRRRBGGBRGGGGGRRGGBRRBGBGGBRRBRBBGRBBGBBBRGRRRRGBBGGGBRGRBGBRGBRGBRBGGBGGGBRBBGRBBBGGGRBBBRGRBRGBBRRGRBRRRBGGRGGGBRGBBGRGGRGBBBGGRGGGBGGBBRBGGGGBRBBRGRRRRBRGBGGBGRGRRBGRGGRGGBRBBRBRBBBRBRBGRBGGBBGRBBBRBRRRGGBGRBGRRRGRRBRGBGBGBBRBBBRGGRGGRGGRBGGRGGGGGBGGRBBBRBGGBBGRBRBGRBBBGRGRBRRBGRBBRBRRBGRBGGBBRBBGGRBGBBRBBGBRBRGBRRBGGGGBBGBBBBRGGGRGRGBRGBGRGGGBRGRRGBGBRRRRGGGGRRRBRRGBBBRBGBBGBRGRBBGBBGRGGRBGBBGRGGRBGRBGRBBRRBBBRGBRBBGBBRBGRBGGRRGRRGGBGBRBBRRRBBRRBRBRRRGBGGGGRRBRBBGBRGBGGBRRRRRRGBGBBBBGBRRBBGGRBRBGRGRGGGRRRGRBGRGBGGGBBBRGRBRRGGRGGRRGRGBGRRBGGBBGBBBGRGBRRGRRBRBGRRGBGGRRRBGRRGBBRGGRRRRRGBGBGBGBRRGBRGRBRBGGRRRGGBGBGBGRGRRRBBRRRBBBBGBRRBBBRRGRBRGBRGBBBRBBRBRGBRRBBBGBRGRGRBGRRBGGGGRGGGRBRGRGGGRRGGGGGGGBBRRBBGBBRBGBRRGGBBBRBBBBRRGBBRRGBRBRRBGBBRRBBGBBGRGBRBGGGRRGBRGRRBRRGRBBBRRRGGBGBGRRBBBBRBGBGRGGGRRGBRBGRRGRRGRGGRGRRRRRGBBGGRRRRBRGBGBRBBGBRGRGGRBRRRRGRRBRBBRRRRGGGRBBBGGBRGRBRRBBRGGRBBRRBRBBBGBBRRBRGGRGGGBBBGGBRGRGBGRBGRBGBRGBBGRBGRRBRGGBBBBRRBBRBBRGBGRRBRRBBRRBRRBGBRBRBRRGRBRGGRGRBRRGRGGRBRBGRBBBGGRBRRGRBGRRBGBBRGGBBBBRGGRBBRRRRRRRBGGRBRBGGRRGRGBGBGBRBBGBRBGBRRGGGRBBGBBBBRGRBRBGBBBBRGBBGRRRRGBRGBGBGGBGGRRRBGGBRGGRGRGRRRRBRBGRRBGGGRGGGBGBGRGRGBRBRBRRBBRGBBGRBGGRGBBRRRBRBGBGGBGRGBGGRGRRGRRRGGRGGBGRRRGBRRBRBBGGGBGGGBBRGBRBRRBBRBGGBGBGGGBBRBBBGGRRGBGRGGBBRGGBRRRBBBGRRGBRBBGRRGGGBBGBGRBRGRGBGGGRRBBBRRBBBGBRBGGBBRGGBBGGRGGRGRBRGGGGBBRBRGRRRBBGBRBBBGRRRGGBGGBGGGGRGBBBBRRGBBBBBGRGRGRBRRRBBRRGGRGRBGRGRGGGRRBGBBRBBRRBGGBRGBGRGBRGRBGRRGRRBBGBBBBBGRGGRBGGRBBBRRRRBBGGGRGRBRGRBRRGBGGBBBGRBRGBGBRRGRRBBRBBGGBRRBGGGBBRBGGRBRRRBGRRGRBBBGGGBBGRGGGRGGBRGRBBBBGBRGGRGGGGRBBBBGBBGBBGGRBRRGBBRRGGRGBGRGBRRGRGRGRGGGBBRRRRGBBRGRRRGBBGRRGRRGRRBBGBRBRBBRGRBGGBBGGRBRGBRGBBBRRRBGRGBRRBGBRBGBRBRRGBRGGGGBRGBBGRBRRRGRRBBGBBRRBRRRGBBRRBBRBBGGGRBBBBBRRRRRRRBGGBGRGRRRGRGRRGBRRBRRBRGGRBRBBGBBBBGBBBRBRBBBRBBGRBGBBRBBRBGBRBGBBRGGBBBGRBGBGGBGBRGGGGBGGGRBGBBRGRGRBGGGRGRGRBGGGRRBGBBRBGBBRGBBRBRRRBGGRRBGRBRBRGRRGGGRRRRGRBBBBRGBBBRGRBRRGBBBGGBBGBGGBGRBGRGBRGBRBRRBRBBRGBGGBGGBRRRRRRBRRRBRGGGBRRBRBGGBBBRRBBGGBGBGGGBRBBRBRGRBGBBGGRGGBBGGRGGGRBBBBRBBGRBRGBBGBGBBGGGBBRBBGRGRBRBRRBBRBGGBGBRBGGGGRBRRGBRRBRRBRRBGRRGRRRRRBBGBRGRRGGGRRBBRGRGGBBBGBGGBRRRGRRGBRBGRBRGRBBRGGGBBGRBRRRRRRBRGRGRGGRGBRBGBRRGRRGGBRBRRGRBBBBRBGBRGBGRBGBRRGBBBRRGRGBBGBRBBBGGRGRRBGGRRBBGBGBBGRGGRRRRGBBRBGRBGBGRRRRRRRGRBBRRGGBRGGRRBGBGRBBGRGGRRRBBRGGRBRGBRBRBGBGBBBGBRBGBRGBGGRGRRRGRBGRRBRGBGBBRRRRGRGGGGRGRGBRBRBBBRGRRRGGGBRGBRBRRRGGBGBRRGRGGGRGGGGRBGRRBGGRRRGRRGRBGGGGBRRRRGBGRRRBGRGRBRBBRRGBGBGRRGGRBRRGGBBRRRGRGRRRGBGRBGGRGGBBBGGRRBGRGBRRGRBGGBBGGBRBRGGGGGBBGRGBRBGBRGRBGBGGBGRRBRGGBRGGGBGGBRGBGBBRGBRRBGGBRBBBBBRGRRRRGRRGBRGGGBBBRGBGRBBGGRBGGGGBBGRRRGGBGGBGBGRGBGGBGGBRGRBBGRRGGRGBRRGBBGGGGBRBRGGGBGRGRGRGGGBRBGRRRGGBRGRRRGRRGGBRBRRGGBGBBBBGBBRRBBRRBBRRRRGRGGRRRGRGGRGRBRGBBRRRGBGBGRRGGRBRRRBGBRGGGBGRRRBBBGRGBGRBGBGGGRRBRRBGRGGRGRGGRGBBBRRRGGGBRRGGRGRBGBBGRBRGRGRRRBRGRBRRRRGBBRRBRRRRBRRRRGGBBBRBGRBGBGBRGGRGRGRRRRBBBRGRBGGGGGBRRGBGRGGBGGGBBBRRGGRBGRGRGBBRBRBBBGBRGGRGBBGRGGRRGGBRGBGGGRBBGGRBRBGGGGRRGGBRGGGRRGGRBBGBBBGBRRRGRBBBGGRRBRRBRBRBBGBRGRGBGBBRRGRBGRGGBBGRBRBGRBBBRGGGBBGBGRRRGRBBBRRRRBRBBGGRRGRBBRBBBGGRRGGRGRBBBBGGRRBBBBGRBGGRBBBRGBRGRRGBGRBRBRRGRRGBBRRBRBBBGBBGGRGRRBRGGRGBBBBBBBBBRGRRBGRGRBBBGRRBRBGRGGGBGGGBRBBGGRBGRRRBGGGRGRRGBGBRBRRRRRBBGGGBGRRBRBRRBBGGGRBGRBRRBGBGRRGBBGRRBBGBBRRBBBRRRBRGRGBBRBGBRBBBBGRRBRGBRGRRRGBRBBBRRBRRBRBGRBBGRGRBBRGBRGRGGRGBBBBBBGRBGBBGGGGRBBGRBGRGRGGGBRRRRGBBBGBGGRGRGGRRBRBGGGGBGBGGBRBBBBGBBGBBGGRBRGGBGRGRRBRRGBRRBGBBRRGRRGRRGRGBRBGGBBBRRGGRGBBGBRGGGBBRBGBGBBRGBBRBBBRRGGBRRBGBRRGBRBBGRRRGRBBBRRGBBRBBRRGRRGGGGGBRGRGGGBGRRRRGRGBGBBBRGGGRRGRBBRRRBBBBGRBGGBRRGRRRRBBGBRRRGRRGBBBRRGRBBBBBGGBRBBRBGGBBRBBBRBGBGBBGGRGGGRRBBRBGGRGBRBGBBRBGRRBGGBGBBGRGRGBRGRBRBGGGRBGRGGGBRGRGGBBRRGGBRGGRBBBBBGBGGRBBRGBBRRBBRGBGBGGBGBRRBRRBRRGBGBRRBRRBRBBBBBRRGRBBBRBBRGRGBRRBGGRRGRGBGBRRGBBBGGBGGGBRRGGRGGRGRGBGRGRBBGRGGGRBBGRGBBRBBBRRBRGGGRBBGRGBRRRBBGRGGBGRBGGBRGBGRBBGBGRBGGRBGRRGRBRGBGRBRRBRRGBGBGBGGRBGRGBGRBRGBBGBRGBGRBBGGRRRGRBGRBRRGGGGRBRBBGGGRRRBGRBBRBRRGBGRRBRBBGBGGRRGGGGRGGGGRRRRGGGRGGRGGBBRBGBBGBRRBGBGBBBRRBRGGBGRBGRGBRBGBBBGBGGBGGRRGGGGRGGRBGGRRRRRRRGRRBGGRRBRGBGBBGRGGRBRBBBBRGRBGGGBRGBGBGGBGBBRRBRRGGRRBRGBBRBGRBGGGBRRGRRRBRGGBGBRGGGGGRRBRGRGBRRGRBBGBGGRGBRGRGBBBGGGGRGRBGRBRBBGBBRBRBRBRBGGRRBRRBGRBBBGBRGBRBGGBGRRBGGGBGRGGRGGBGGGGBRBBRBRGGGRRGGGBBBRGBRGBBRRGBGBBGRRGRBBRRBGRBGBRGGRGGGBGRRGGGBBRBRGRRGGRRBRRRRRGGBBGBRBGGGRBGGGGRBRRBBRRBGRRRGBGBGRBGBBRBRBBRGGRRBRRRRBRBGGGBRBGGRBGBBRRRGBRRRRGRGBGGBRBGBBRGRGBGRRGBGRGRGBGRBBGRRRBGBBGBRRRGRRRBBRBBBBBGGGRGGBBRBRBBRGBRBRRBBBRGRBRRGGGRBRGGRRBBGGGRRGBBRBBBGBRBRRBRBBBGRGBGBGGGBBGRGRGRBBGRGBRBRBGGBBRGGBGGBBBBGBRBRGBBBRRRBGRBBBRRRBBGRGRRRRGBBRBBBBGGGGRGRBRGRBGGRBRRBBRRRBRGGBBGBRGRGRRBGBBGBBBBRBRGBBBBRGBRGGGRGBBRRGRGBGGBGGGRRBRBBBBGGBRBGBGGBGGGRRGRBRBRRGGGRGGGGBBGBRBBRRBBBBGRBBBGRGBGBRRBGRRRRGRGGBGGGRBBRBGGRRRGRRBRRRBBBBRGBRRBBBRRGGRRGBRBGBGGGBRGGRBGGGGBGGRRRGBRGRRRRGGRRGRBBGRGGRRGGGGBRBGGBGRBRRRGBRGRBRGGBBRBRGRRRRBRBRBRRBRGBBRGRRBGBRBGRGRGRRRBRBRGGBRBRRRBGBGRBBBRRGRBGRRBBBRRBRGRBBGBGRBRGRRGGRGRRBBBGGRBRBBRRRRGRBBRBGGGGGGBBGRRGBBGBRBRRBGBGRGGBBGRBGBBGBRRRGGBBBGBBRGRRGBBRRBGRBBBGRRBBRBBGRRRRGRRBGGBBBBGBRGGBGRBRGBRGGBRBBRGRGBBRGRRGRGBBGBRGGBRGGRBRBGGRGGBBGRRGRBGRRGRGBBRBBRGGRRRGGBGGBGGGBBBBRBBRGGRBBGRGBGRGGGRBRBBGBRGGGGBBBBBGRGBRRGGBRBGBGRRBGGRBGRBBBBBRRBRRBRGGRRRBGBGGBRRGBBRBRRRBGGGGBBRGGBBRRGRRRRRBGBGRRGGRBGGBRRGGGGRBBBRRBBBGBGRRBGBRGRBGRBGBGRBRGBRRGRBGBBRBGBBBGRRRGRGGRGBGRGRBRGRRGRRGBRBBGRGBBGGRRRGRGGBBGBRGBBGGGBGRGBBGGRBBBGRRGBGRBRBBGBBBGRGGRGBRGBRBBRGBBRRBGRBBRRBBRGBGBGBRGBBGRRBRBRGBBRRGRGRBGBRGBBBGRGBRBGRRGRBBGRGRBGBRGBGRBRGRBGRGBGBRRRRGGRBBRGGRGGGBBRRBBGGBGRBBGGGRGBGRRGRBBGGRBRRRGBGBRGRRGRRRGGGRRBRRRRGRRGRBRBGBGGGGRRRBGRBBBRBGRGBRRRBRGGRRRGRGRBGGRGBBBBGGBGGGRGGRGRGGRBGBRBRRGGRGRRRBRGRGRBGBRBRBGRRGRBBGRBRRGBBGRGGRBBBBBGRGBGGRBRBBGGGRRBBBGRRRGGBRRRRGGGGGBRBRGBGGBGRBGGBBGBBRRRGGGGGBBBBRRGGGRRRRRBRRRGRGBGBRGGGRGBRRBGRBGBRBBBGBGRGRRRBRRRGBBRRGGGRRBBBRGGGBGGGGBBBBBBGRRRBGBGGRBBBGGRBRRRRBGBGBBRRBBBGRBRGRRGRGGRBGGGBRBRGBBRBBGBBGBBGBBBBGGRGBRRGBBRRRGGRBRGBBGGRBBGGBRBRBRRRGGBBRBRBGBRRGGGBBGBBGGBGGBBRRGGBRBRRBBRGRBRRRRRGGGRGRBRGRBGBGGGRRRGRBBGGGBGRGRGBGRRBRRRBRRRBRRRRGBGGRRRBRRBBGRBBRBGBBRBRRRBGGRRGRGBRBGBGRRRRBGRBBGBBRRRGGRBGGRGGBBBBGGGBGGBGGGGGGBBGRGRRGRBBRGBBRBGRGBGGGRGGGGGBBBRRBBGRRBGRRRBGRRBRBRBRGBBGRBBGRGBGGBBGGGGRRBBRBGBRBGRBRBGBGGGGRRBGBGRBRGGRGGBBRGGBGGGGGBRGGGGGBBBRBGBGGGGGRRGRGGBBGGBBGRBBBGRRRRGRRRRGRBRGGGRGBRBRBBBGBBBGGRBRRGGBRBBBGGGGGGRBBRGRGGBRBBBBGRBRRRRBBRBBGBGGGRGRRRBRRRBGGRBGBRRBBRGRBRGGBRBGRRBRGRRRGRGRRRBBRRBGGBRGBRRRRBRGRRBRGRBGRGGGBRRGRBBRGRRGRBBRBRRGGGRRGBGRGRBRRRRRBBBBRRRBBGBBRBRBBBBGBGRRBRBRRGGGBGRRRGBBBBRGBRGBGGGBGGBRGGBBGGRRBBBRGGGRRGGRRGBBBBRGRRGRRBRGGBRGBBBRBGBRGBRGBGGBRGGGGGBGBBBGBRRBRBRBRGRBRRGGBGBGGBGBBBGRRGBRRRRBRBRRRBGGGBBBRBGGBGRRRRBBBBRGGBRGRGGRRRRGBRBRRBBGBBBRBGGRRBRGGRRRRRBBRRRRBGRBGGBRRBGBGBBBGGBGGBBBGRBGBGBBGRRBRGBGGRRBRRGGRBGGRGBRBBRGRGRGBGBGBRBBGRBRGRGRBGBRBGBRGBBRBBRBGGGGRBGGBRGRRBBBRGRRGBGGBBRBBGBGBGGBRBGRGRBBRGBGGGGGRBBBGBBBRBRBGRRBGBGRBGGBBGGBBRRRRBGBBBGRGBGBRBGBRBRBGBBGBBRGBBBBGRBRRRBBRRBGGGBGGRGGBBGBRBRGGRGBRBBBBBRBGGRRBGRBBRBGGGGBRRRRGRBBRGBGGRGGGBBBBGBRGBRGRBBGGRRGBRGBRRBGRBRGBGBGRBRGBBGRRBGBRRGRRRGBGRBGGBRBGGBGGGRBBGRRRRBGRRBRBGRGGGGBRGRGRBGGBBRBRGRRGGBRGRGGGRRBBBGBBRBRBRBBGRGBBBRRBRRBBBRBGGRRRGGGBRRGRRRGRBBGBRBGRGBRBGGGRBBGBRBRRBBBGRBRBGRRBGRGRBBGGBGBBRGGGGBGRBGRGBRGRGBGRGGRGBRGGBGBRGGBGBRGGBBRGBRRBRRRBGGRRBBRRBRGRRRRRGRBGRBRRBBBGGBBGRBRRGRRGGGBBRRRRGBGGRGRGRGBBRRGRGBBBBGGBGGBRBRRGGBGBRBGRGRGBRGBGBGBRBBBGGBRBBGBBRRGGBBRRGRRRBBRRGRBGBRGGGGBGGBRBGGRGGGRBBRBGBRRBGBRRGRRRBGGBBGGRBGRGGRBBGGBRRBBBRGBGGBBBGBBGBRRGGGRBBBGGGRGGGGBBBBGGBBRRBBBRRGGGGBBGGBBRRGBGBGGGGGBGBBBRGBRRBRRBRBRRBBRRBGRGBRGRBBBBRRBGRBBBRRBGRGRRRBRGBGGGGBRGGRGBBGRGGGGBRRBGGBRRGGRRRRGRBGGGBGRGRRBRBGBBBRBBRRBBGBBRGGBGRBRBGBGRBBGGRBRRBRBRGBGBBBRBBGRBRGRGGBGRGGGRRGRRBRGRGRRGRRGRRBRGBRGBRBRBBBBGRGGGRRRGGGGRGRRBBGGRRBGBBGBGBRRBRGRRGGGRRRBRGBBBGGRRBGBGBGBBRBGBGGRGGGGBGRRRBRGGRGGBRGGGRGBBBBBGRBRGGGBRGRGRBRRBBGRBRGGGGRBRBBRBRBGRRBBBRGGGRRBRGBGGRGBBGGRGBRRBRGBBRGGBRGBGBGRGGRBGBGBGGRBRRBRGBBBGGGBRRGRRRGBGBGRGBBRRRRBBRGRRBBRGGBBBBGBRRBRBBRBRGGRRBGGBBGRGBBBRGBRBGGBGGRRBRGBBBBBBGRBBBBRGRRBRGBGGBBBGBBRBGGBBRGRGRBBRGBBGRGBRGGGRGRRBRRBGBBGGRRGGBBRBRBBRRRRGRRRGBBBBBRGRGBBBRBBRBGBBRGBGRGGBBRGRBBGRRGRGGBBGRRRRRRGGGBBBBBRRGGRRGGGBBGBRBRGGRBGRRRBGGGGRGBRRGGBBRRGBGBBRGGGGRRBRGRBBBGBGGBGRGBRBGGBRRRBGBBGGRRGBBBRRRGGGGRBRGRBRGGBRGGGBRGGRGGBBRGGBGGBGBBBGRBGGRRRBBBRGRGGBBRGRGRBRRRGGRBGBBRGRRBGRBGRRRGGBGBBGRGRRGGBGBRRRBBRGGBBGBBRGGRGBBGRGGGBBGRRBBBBGBGGRRRRGBRGGGGBGGRRBRBRRBRBRBRGBRBGRBGRBRRBGRRRBBBBGBRBGBBRBRRBRBBGGBGRBRBRRRRBBBRGGGBGRGRBBRBGGGBRBGBGGGRBRBRGGRGRRGGGGBGGGBBGRGBGBGGGGRRRGRGRGBBGGRRBGRRGBBGBBBRBBRRBBGRBRRBBBRRRRGRRGBGRGGRRRGRGBRGRRRBRGGBGBBRBRGRRBBBBGRBRBRRRRRGRGGGGBRRBGGGBBGGGBBRBBGRRRBBGGBBGBRRRBBBRBRBRRRRGGBRGGBGBGBGBGGRRRBGGRBBGGRBBGGRBGBGGGRRRGRGBRRBGGBBRRRBBBBRBGGRRRBBBRBRRRRBRBBGBBRGGGGRBGRRGGRGGBRRRBRGGRGGGGBGBGRRBBRRRBGGRGBRRBGBGRBRGBRRGBRGBGGRGBRRGRRGGGGGBBGGRRGRBGGGGRGBBRBRRBBBRBBRBRRBBRRGBBRGRGBGGBGRGRRGGRGGBBGRRGGBRRGGBGRGBGBGGRGRRGBGBGBGBRGBGBRGGRBRRGBGGRRGGBRRBGBBRBGBRRGRGGGGGBBGBGGBGGGBRRBGGBRGBRBGGRGBGBGGBRBBBGBRRGGBGBRBGBRBGRRRRBRBRRBRRGBGRGRBRRRGBRRRBRRRRGGGRRRGBBBBBGBRBBGRBGGRBBRGBRBGRGRBGRBRBGGRGRBGBGRGGRRBBBBGBRGRGBGBRGBBBBRBGGGGBGGBRRBBRRRBRRGRBGBRGRBGBGBGGRGRBRGBRBRBGBGGRRRGGRGRRGBGBBGBBBRGRBBBGBBRBBGGRBRRRBBRBRBBBBRRRGRBGBBBRBBBBGRBRRRGRRRBBBBGBBGBBRGGGGGBRGGGGBGGGBBGBRGGBGGRGGBBRGBGBGGGGRBGRBRRRGGGBBBGGBRBRBBRGRRGGBGRGBRBGRGRBGGGGGBRRBGBGGBBRGGGBGGGGGRRBBGGGGGBGBRGRBBGGRRRBRGRRGGGGBGRRRBRBBRGBGGGBBRGBGRBRBRRRGRBBBBBRRBRBRBRRBBBBBBRRGGBRGRRGGRGRRGGRBGRBGGBGBRGGRGBGRRRBGRBRGGBBRRBBRRGGBRBGGRRGBGGBBGGGRBBGBGGGBBRRGRBGRRBGGGRRRGRBGGRGRGGBRRGGGGRGRRBBBBBBRGBGRBRRRGRBRRGBBRBRRGBRRGBRGBRBRGBRGBBGBRBGRRGRRRRGGBGBGGBBGBRBGBBRBRRGBBRRBGRGBRGRGRRBBRRBBRBRRRBGGRGBGGGBRGBGRGGGGBGGBGRBRGGGRBBRBRGGBGGBRRGBRGRRGGRGBBRRB'))

if __name__ == '__main__':
    main()  